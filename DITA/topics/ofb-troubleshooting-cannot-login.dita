<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE troubleshooting PUBLIC "-//OASIS//DTD DITA Troubleshooting//EN" "troubleshooting.dtd">
<troubleshooting id="ofb-troubleshooting-cannot-login">
  <title>Login and Request Issues on HTTP in Google Chrome</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Login problems</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <troublebody><condition id="problem">
      <title>Problem</title>
      <p id="p_a2k_dgk_54b">When running <ph keyref="product"/> over HTTP, users may encounter login
        issues or errors on actions such as submitting forms and making changes (e.g., POST or PUT
        requests) if accessing the server from <i>Google Chrome</i>. This is due to Chrome's strict
        handling of cookies with the <codeph>SameSite=None</codeph> attribute when the
          <codeph>Secure</codeph> attribute is not also present.</p>
    </condition><troubleSolution>
      <cause id="cause">
        <title>Cause</title>
        <p id="p_zql_gkv_3dc"><ph keyref="product"/> uses HTTP cookies to authenticate client
          requests and maintain session information, including CSRF (Cross-Site Request Forgery)
          token validation for enhanced security. The session cookie (JSESSIONID) stores the user's
          session ID, which is crucial for both login authentication and CSRF token validation.
          However, by default, <ph keyref="product"/> sets the <codeph>SameSite=None</codeph>
          attribute on all cookies, including JSESSIONID, regardless of whether the server runs on
          HTTP or HTTPS.</p>
        <p id="p_arl_gkv_3dc">In Chrome, any cookie with <codeph>SameSite=None</codeph> must also
          have the <codeph>Secure</codeph> attribute (meaning it can only be sent over HTTPS). When
            <ph keyref="product"/> is accessed over HTTP, Chrome rejects the JSESSIONID cookie due
          to the missing <codeph>Secure</codeph> attribute, causing issues in:</p>
        <ul id="ol_brl_gkv_3dc">
          <li id="li_crl_gkv_3dc"><b>Login</b> - The session cookie is blocked, preventing proper
            authentication.</li>
          <li id="li_drl_gkv_3dc"><b>POST and PUT Requests</b> - Any request that requires CSRF
            token validation fails because the session is invalid, leading to errors.</li>
        </ul>
      </cause>
      <remedy id="solution">
        <title>Solution</title>
        <steps-informal>
          <p id="p_z5b_qkv_3dc">To avoid these issues when running <ph keyref="product"/> on HTTP in
            Chrome, you can configure the application to omit the <codeph>SameSite=None</codeph>
            attribute on cookies:</p>
          <ol id="ol_avb_qkv_3dc">
            <li id="li_bvb_qkv_3dc">Open the
                <filepath>{oxygen-feedback-home}/config/feedback-application.properties</filepath>
              file.</li>
            <li id="li_cvb_qkv_3dc">Add or update the following property:
              <codeblock outputclass="language-bourne">feedback.cookie.samesite.none=false</codeblock></li>
            <li id="li_dvb_qkv_3dc">Restart the <ph keyref="product"/> server after saving the
              configuration changes.</li>
          </ol>
        </steps-informal>
      </remedy>
      <remedy id="remedy_x2z_5kv_3dc">
        <title>Additional Troubleshooting</title>
        <steps-informal id="steps-informal_ixm_xkv_3dc">
          <p id="p_uw3_ykv_3dc">If the issue persists after configuring
              <codeph>feedback.cookie.samesite.none=false</codeph>, it may be due to a conflict with
            another JSESSIONID cookie set by a different application on the same host but over HTTPS
            (with the <codeph>Secure</codeph> attribute). Chrome will block non-secure cookies from
            overwriting a secure cookie with the same name.</p>
          <p id="p_vw3_ykv_3dc">To resolve this:</p>
          <ul id="ul_ww3_ykv_3dc">
            <li id="li_xw3_ykv_3dc"><b>Clear cookies for the domain</b>:<ol id="ol_yw3_ykv_3dc">
                <li id="li_zw3_ykv_3dc">In Chrome, go to <i>chrome://settings</i>.</li>
                <li id="li_ax3_ykv_3dc">Click <menucascade>
                    <uicontrol>Privacy and security</uicontrol>
                    <uicontrol>Third-party cookies</uicontrol>
                  </menucascade>.</li>
                <li id="li_bx3_ykv_3dc">Click <uicontrol>See all site data and
                    permissions</uicontrol>.</li>
                <li id="li_cx3_ykv_3dc">At the top-right, search for the website's name.</li>
                <li id="li_dx3_ykv_3dc">To the right of the site, click
                    <uicontrol>Delete</uicontrol>.</li>
                <li id="li_ex3_ykv_3dc">To confirm, click <uicontrol>Delete</uicontrol>.</li>
              </ol></li>
            <li id="li_fx3_ykv_3dc"><b>Run Oxygen Feedback over HTTPS</b>: For a permanent solution
              and to align with security best practices, consider running <ph keyref="product"/>
              over HTTPS. This allows the <codeph>SameSite=None</codeph> and <codeph>Secure</codeph>
              attributes to coexist on cookies, ensuring compatibility with Chrome's security
              policies.</li>
          </ul>
        </steps-informal>
      </remedy></troubleSolution></troublebody>
</troubleshooting>
