<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="xml-refactoring-operation-descriptor">
  <title>Custom Refactoring Operation Descriptor File</title>
  <body>
    <p>The second step in creating a custom refactoring operation is to create an operation
      descriptor file. The easiest way to do this is to use the <b>New</b> document wizard and
      choose the <b>XML Refactoring Operation Descriptor</b> template.</p>
    <section id="introduction_to_the_descriptor_file">
      <title>Introduction to the Descriptor File</title>
      <p>This file contains information (such as <i>name</i>, <i>description</i>, and <i>id</i>)
        that is necessarily when loading an XML Refactoring operation. It also contains the path to
        the <xref href="custom_operation_sample_xquery.dita#custom_operation_sample_xquery">XQuery
          Update script</xref> or <xref href="custom_operation_sample.dita#custom_operation_sample"
          >XSLT stylesheet</xref> that is associated with the particular operation through the
          <xmlelement>script</xmlelement> element.</p>
      <p>You can specify a <i>category</i> for your custom operations to logically group certain
        operations. The <xmlelement>category</xmlelement> element is optional and if it is not
        included in the descriptor file, the default name of the category for the custom operations
        is <i>Other operations</i>. </p>
      <p>The descriptor file is edited and validated against the following schema:
          <filepath>frameworks/xml_refactoring/operation_descriptor.xsd</filepath>. </p>
    </section>
    <section id="declaring_parameters_in_the_descriptor_file">
      <title>Declaring Parameters in the Descriptor File</title>
      <p>If the XQuery Update script or XSLT stylesheet includes parameters, they should be declared
        in the <b>parameters</b> section of the descriptor file. All the parameters specified in
        this section of the descriptor file will be displayed in the <uicontrol>XML
          Refactoring</uicontrol> tool within <xref
          href="refactoring-xml-documents.dita#refactoring-xml-documents/parameters_dlentry">the
            <uicontrol>Configure Operation Parameters</uicontrol> wizard page</xref> for that
        particular operation.</p>
      <p>The value of the first <xmlelement>description</xmlelement> element in the
          <xmlelement>parameters</xmlelement> section will be displayed at the top of <xref
          href="refactoring-xml-documents.dita#refactoring-xml-documents/parameters_dlentry">the
            <uicontrol>Configure Operation Parameters</uicontrol> wizard page</xref>.</p>
      <p>To declare a parameter, specify the following information:</p>
      <ul id="ul_irs_glv_gr">
        <li><b>label</b> - This value is displayed in the user interface for the parameter.</li>
        <li><b>name</b> - The parameter name used in the XQuery Update script or XSLT stylesheet and
          it should be the same as the one declared in the script.</li>
        <li><b>type</b> - Defines the type of the parameter and how it will be rendered. There are
          several types available:<ul id="ul_xm5_j4v_gr">
            <li><b>TEXT</b> - Generic type used to specify a simple text fragment.</li>
            <li><b>XPATH</b> - Type of parameter whose value is an XPATH expression. For this type
              of parameter, <ph keyref="product"/> will use a text input with corresponding content
              completion and syntax highlighting.<note>The value of this parameter is transferred as
                plain text to the XQuery Update or XSLT transformation without being evaluated. You
                should evaluate the XPath expression inside the XQuery Update script or XSLT
                stylesheet. For example, you could use the <codeph>saxon:evaluate</codeph> Saxon
                extension function. </note><note>A relative XPath expression is converted to an
                absolute XPath expression by adding <codeph>//</codeph> before it
                  (<codeph>//XPathExp</codeph>). This conversion is done before transferring the
                XPath expression to the XML refactoring engine.</note><note>When writing XPath
                expressions, you can only use prefixes declared in the <xref
                  href="preferences-xpath.dita"><menucascade>
                    <uicontrol>Options</uicontrol>
                    <uicontrol>Preferences</uicontrol>
                    <uicontrol>XML</uicontrol>
                    <uicontrol>XSLT-FO-XQUERY</uicontrol>
                    <uicontrol>XPath</uicontrol>
                  </menucascade></xref> options page.</note></li>
            <li><b>NAMESPACE</b> - Used for editing namespace values.</li>
            <li><b>REG_EXP_FIND</b> - Used when you want to match a certain text by using Perl-like
              regular expressions.</li>
            <li><b>REG_EXP_REPLACE</b> - Used along with <codeph>REG_EXP_FIND</codeph> to specify
              the replacement string.</li>
            <li><b>XML_FRAGMENT</b> - This type is used when you want to specify an XML fragment.
              For this type, <ph keyref="product"/> will display a text area specialized for
              inserting XML documents.</li>
            <li><b>NC_NAME</b> - The parameter for <codeph>NC_NAME</codeph> values. It is useful
              when you want to specify the local part of a <xref keyref="glossentry_qname"
                  ><term>QName</term></xref> for an element or attribute.</li>
            <li><b>BOOLEAN</b> - Used to edit boolean parameters.</li>
            <li><b>TEXT_CHOICE</b> - It is useful for parameters whose value should be from a list
              of possible values. <ph keyref="product"/> renders each possible value as a radio
              button option.</li>
          </ul></li>
        <li><b>description</b> - The description of the parameter. It is used by the application to
          display a tooltip when you hover over the parameter.</li>
        <li><b>possibleValues</b> - Contains the list with possible values for the parameter and you
          can specify the default value, as in the following
          example:<codeblock outputclass="language-xml">&lt;possibleValues onlyPossibleValuesAllowed="true">
    &lt;value name="before">Before&lt;/value>
    &lt;value name="after"default="true"&gt;After&lt;/value>
    &lt;value name="firstChild">First child&lt;/value>
    &lt;value name="lastChild">Last child&lt;/value>
&lt;/possibleValues></codeblock></li>
      </ul>
    </section>
    <section id="specialized_parameters_to_match_elements_or_attri">
      <title>Specialized Parameters to Match Elements or Attributes</title>
      <p>If you want to match elements or attributes, you can use some specialized parameters, in
        which case <ph keyref="product"/> will propose all declared elements or attributes based on
        the schema associated with the currently edited file. The following specialized parameters
        are supported:<dl>
          <dlentry>
            <dt>elementLocation</dt>
            <dd>
              <p>This parameter is used to match elements. For this type of parameter, the
                application displays a text field where you can enter the element name or an XPath
                expression. The text from the <xmlatt>label</xmlatt> attribute is displayed in the
                application as the label of the text field. The <xmlatt>name</xmlatt> attribute is
                used to specify the name of the parameter from the XQuery Update script or XSLT
                stylesheet. If the value of the <xmlatt>useCurrentContext</xmlatt> attribute is set
                to <b>true</b>, the element name from the cursor position is used as proposed values
                for this parameter.</p>
              <p>Example of an
                <xmlelement>elementLocation</xmlelement>:<codeblock outputclass="language-xml">&lt;elementLocation name="elem_loc" useCurrentContext="false">
                &lt;element label="Element location">
                    &lt;description>Element location description.&lt;/description>
                &lt;/element>
&lt;/elementLocation></codeblock></p>
            </dd>
          </dlentry>
          <dlentry>
            <dt>attributeLocation</dt>
            <dd>
              <p>This parameter is used to match attributes. For this type of parameter, the
                application displays two text fields where you can enter the parent element name and
                the attribute name (both text fields accept XPath expressions for a finer match).
                The text from the <xmlatt>label</xmlatt> attributes is displayed in the application
                as the label of the associated text fields. The <xmlatt>name</xmlatt> attribute is
                used to specify the name of the parameter from the XQuery Update script or XSLT
                stylesheet. The value of this parameter is an XPath expression that is computed by
                using the values of the expression from the <i>element</i> and <i>attribute</i> text
                fields. For example, if <userinput>section</userinput> is entered for the element
                and a <userinput>title</userinput> is entered for the attribute, the XPath
                expression would be computed as <codeph>//section/@title</codeph>. If the value of
                the <codeph>useCurrentContext</codeph> attribute is set to
                  <userinput>true</userinput>, the element and attribute name from the cursor
                position is used as proposed values for the operation parameters.</p>
              <p>Example of an
                <xmlelement>attributeLocation</xmlelement>:<codeblock outputclass="language-xml">&lt;attributeLocation name="attr_xpath" useCurrentContext="true">
                &lt;element label="Element path">
                    &lt;description>Element path description.&lt;/description>
                &lt;/element>
                &lt;attribute label="Attribute" >
                    &lt;description>Attribute path description.&lt;/description>
                &lt;/attribute>
&lt;/ AttributeLocation></codeblock></p>
            </dd>
          </dlentry>
          <dlentry>
            <dt>elementParameter</dt>
            <dd>
              <p>This parameter is used to specify elements by local name and namespace. For this
                type of parameter, the application displays two combo boxes with elements and
                namespaces collected from the associated schema of the currently edited file. The
                text from the <xmlatt>label</xmlatt> attribute is displayed in the application as
                label of the associated combo. The <xmlatt>name</xmlatt> attribute is used to
                specify the name of the parameter from the XQuery Update script or XSLT stylesheet.
                If you specify the <xmlatt>allowsAny</xmlatt> attribute, the application will
                propose <i>&lt;ANY></i> as a possible value for the <b>Name</b> and <b>Namespace</b>
                combo boxes. You can also use the <xmlatt>useCurrentContext</xmlatt> attribute and
                if its value is set to <userinput>true</userinput>, the element name and namespace
                from the cursor position is used as proposed values for the operation
                parameters.</p>
              <p>Example of an
                <xmlelement>elementParameter</xmlelement>:<codeblock outputclass="language-xml">&lt;elementParameter id="elemID" useCurrentContext="true">
    &lt;localName label="Name" name="element_localName" allowsAny="true">
        &lt;description>Local name of the parent element.&lt;/description>           
    &lt;/localName>
    &lt;namespace label="Namespace" name="element_namespace" allowsAny="true">
        &lt;description>Local name of the parent element&lt;/description>           
    &lt;/namespace>        
&lt;/elementParameter></codeblock></p>
            </dd>
          </dlentry>
          <dlentry>
            <dt>attributeParameter</dt>
            <dd>
              <p>This parameter is used to specify attributes by local name and namespace. For this
                type of parameter, the application displays two combo boxes with attributes and
                their namespaces collected from the associated schema of the currently edited file.
                The text from the <xmlatt>label</xmlatt> attribute is displayed in the application
                as the label of the associated combo box. You can also use the
                  <xmlatt>useCurrentContext</xmlatt> attribute and if its value is set to
                  <userinput>true</userinput>, the attribute name and namespace from the cursor
                position is used as proposed values for the operation parameters.<note>An
                    <xmlelement>attributeParameter</xmlelement> is dependant upon an
                    <xmlelement>elementParameter</xmlelement>. The list of attributes and namespaces
                  are computed based on the selection in the <i>elementParameter</i> combo
                  boxes.</note></p>
              <p>Example of an
                <xmlelement>attributeParameter</xmlelement>:<codeblock outputclass="language-xml">&lt;attributeParameter dependsOn="elemID" useCurrentContext="true">
    &lt;localName label="Name" name="attribute_localName">
        &lt;description>The name of the attribute to be converted.&lt;/description>
    &lt;/localName>
    &lt;namespace label="Namespace" name="attribute_namespace" allowsAny="true">
        &lt;description>Namespace of the attribute to be converted.&lt;/description>
    &lt;/namespace>        
&lt;/attributeParameter> </codeblock></p>
            </dd>
          </dlentry>
        </dl></p>
    </section>
    <note>All built-in operations are loaded from the <filepath><term
          conkeyref="reusables-user-guide/oxy-install-dir"/>/refactoring</filepath> folder.</note>
  </body>
  <related-links>
    <linklist>
      <title>Related Information:</title>
      <link href="custom_operation_sample.dita#custom_operation_sample/descriptor-example-section">
        <linktext>Example of an Operation Descriptor File with an XSLT Stylesheet</linktext>
      </link>
      <link
        href="custom_operation_sample_xquery.dita#custom_operation_sample_xquery/descriptor-example-section">
        <linktext>Example of an Operation Descriptor File with an XQuery Update script</linktext>
      </link>
    </linklist>
  </related-links>
</topic>
